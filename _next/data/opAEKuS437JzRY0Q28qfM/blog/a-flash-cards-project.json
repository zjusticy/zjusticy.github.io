{"pageProps":{"title":"A markdown-capable flash cards project using React, Zustand and Firebase","date":"2024-01-30T16:40:32.169Z","description":"A useful project for React beginners","slug":"a-flash-cards-project","content":"<p><img src=\"/img/flash-card-title.png\" alt=\"React_Zustand_Firebase.png\"></p>\n<p>Flashcards are the fast and best way to absorb knowledge. Whether you are memorizing vocabulary, physical or Java interview questions, flashcards are always the best fit.</p>\n<p>For our project, we have two main goals: one is a simple and fun UI, another is markdown showing capability.</p>\n<p><a href=\"https://github.com/zjusticy/flashCards\">Github</a></p>\n<p><a href=\"https://flash-cards.vercel.app/local/intro\">Demo using local storage</a></p>\n<h2>Pages and Data Structure</h2>\n<p>There are three main pages in this web application.</p>\n<ol>\n<li><strong>The introduction page</strong>. This is the entrance of the application. We can add or remove list from our database. It also contains all the list names of cards we have.</li>\n</ol>\n<p><img src=\"/img/introduction-page.png\" alt=\"introduction-page\"></p>\n<ol start=\"2\">\n<li><strong>The memorizing page</strong>. This is the page for memorizing the cards. If you already know the answer, click the easy button. Otherwise click the right arrow. The card will show up again later. If you want to change the status of the previous cards, click the left arrow. The show/hide button is used to switch between the front and back side of the card.</li>\n</ol>\n<p><img src=\"/img/memorizing-page.png\" alt=\"memorizing-page\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token comment\">// state of this page</span>\n memName<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// the name of the card</span>\n memId<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// the id of the card</span>\n memIndex<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the index of the card in activeList</span>\n flashBack<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the cache of the previous card</span>\n activeList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// the list of cards for this round</span>\n backUpList<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// the list of cards for next round</span>\n again<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// whether we want to see this card again</span>\n hide<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// front side or back side</span>\n traceBack<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// if we are checking the previous card</span>\n done<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// when we reach the last card</span>\n</code></pre>\n<ol start=\"3\">\n<li><strong>The update page</strong>. This is the page when we want to add/delete or update the card.</li>\n</ol>\n<p><img src=\"/img/card-update.png\" alt=\"card-update\"></p>\n<pre class=\"language-js\"><code class=\"language-js\"> <span class=\"token comment\">// state of this page</span>\n orderForm<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// The card information</span>\n   front<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// front side information</span>\n     value<span class=\"token operator\">:</span> myPlaceHolderF<span class=\"token punctuation\">,</span>\n     valid<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n   back<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// back side information</span>\n     value<span class=\"token operator\">:</span> myPlaceHolderB<span class=\"token punctuation\">,</span>\n     valid<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n   <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n formIsValid<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// whether the form is valid or not</span>\n preview<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// showing the rendered markdown text</span>\n addNew<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// adder status or update status</span>\n</code></pre>\n<h2>Data in Zustand and Firebase</h2>\n<p>Only a few global states stored in Zustand, other data is cached by <a href=\"https://swr.vercel.app\">swr</a>.</p>\n<ul>\n<li>Data in Zustand</li>\n</ul>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// list of cards</span>\nlistNames<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// Cache of all lists, has the structure like {name1:{id1:card1, id2:card2}, name2:{id3:card3, id4:card4}...}</span>\ncardsCache<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// Sorted Ids for one active list of cards</span>\nsortedIds<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// Name of the current list</span>\nactiveListName<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// id of card being operated</span>\nactiveId<span class=\"token operator\">:</span> <span class=\"token keyword null nil\">null</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// true: single column, false: double columns</span>\nmodeS<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\n<span class=\"token comment\">// Auth state</span>\nisAuth<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true: single column, false: double columns</span>\nmodeS<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true: single column, false: double columns</span>\nmodeE<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// drawer control for card update page</span>\ndrawerVisible<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// true: local storage, false: on cloud</span>\nuseLocalDB<span class=\"token operator\">:</span> boolean<span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>Data in firebase</li>\n</ul>\n<p><a href=\"https://firebase.google.com/docs/storage/web/start\">Google’s Firebase</a>) is a convenient online database with authority management. Cloud Storage from Firebase lets you upload and share user generated content.</p>\n<p>The rule for the database accessibility is:</p>\n<pre><code>{\n  \"rules\": {\n    \"userData\": {\n      \"$uid\": {\n        \".read\": \"$uid === auth.uid\",\n        \".write\": \"$uid === auth.uid\"\n      }\n    }\n  }\n}\n</code></pre>\n<p>The user can only write and read the content in their own folder. The data stored under user’s folder is structured as below:</p>\n<pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// names of all lists</span>\nlists<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name1<span class=\"token operator\">:</span>timestamp1<span class=\"token punctuation\">,</span> name2<span class=\"token operator\">:</span>timestamp2<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// the list has the structure like</span>\ncollections<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>name1<span class=\"token operator\">:</span><span class=\"token punctuation\">{</span>id1<span class=\"token operator\">:</span>card1<span class=\"token punctuation\">,</span> id2<span class=\"token operator\">:</span>card2<span class=\"token punctuation\">,</span> <span class=\"token spread operator\">...</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n</code></pre>\n<h2>The Algorithm for Memorizing</h2>\n<p>We do not have any memory curve in this application. The logic is: first, go through all the cards once, and store the cards you want to memorize again in random order. Second, go through the cards you stored in the previous step and store the cards you are still unclear, and so on so forth.</p>"},"__N_SSG":true}